1. GitHub repo setup
2. Project Template creation
3. Setup & Requirements installation
4. Logging, Utils & Exeption module
5. Model workflows
6. All components notebook experiment
7. All components modular code implementation
8. Training Pipeline
9. MLFlow (MLOps tool) for experiment tracking and model registration
10. DVC (MLOps tool) for pipeline tracking and implementation
11. Prediction Pipeline & User app creation
12. Docker
13. FInal CI/CD Deployment on AWS

---------------------------------------------------------------------
- Object classification task using Deep Learning
- Kidney CT scan images with normal and tumored kidneys (bright colors present in the kidneys and malformed kidneys)
- kidney/renal tumors are growths in the kidneys that can be benign or cancerous. Most do not cause symptoms and are discovered unexpectedly when you are beign diagnosed and treated for another condition.
--------------------------------------------------------------------
Git commands here
1. open Git Bash -> git clone https repo -> cd to access folder -> code . to open the folder in vscode
2. Create template and run with python template.py
3. commit and push to repo: git add . -> git commit -m "message" -> git push origin main -> refresh github repo on web
4. setup.py code and then create virtual env: conda create -n kidney python=3.8 -y
    - conda activate kidney
    - pip install -r requirements.txt
5. Logging, Exeption & Utils:   ------> these 3 things are needed to start the implementation
    - create Logging module
        - open src -> cnn clf -> __init__.py and code the logger
        - import the created logger (CNN_Classifier/__init__.py) in main.py and check the new folder with running logs
    - Technicals for exeptions
        - to see if i'm getting any exeptions, where\when and the type -> use utils folder
        - code the functions
        - open research\trials.ipynb and set the kernel to kidney python environment and check box exeptions and @ensure_annotations decorator
    - commit utils
6. follow Project workflow on readme! Basically update the CNN_Classifier
    - Data Ingestion
        - Download images -> make 2 folders (normal + tumor) -> zip -> add to google drive -> click on zipped folder -> copy link
          -> give access to anyone (important)
          GDRIVE LINK >>> https://drive.google.com/file/d/1Sm3W06lYtO1f3i6RM0z3iiET1zdBj6AO/view?usp=sharing <<<
          PRFIX FOR DOWNLOAD >>> prefix = "https://drive.google.com/uc?/export=download&id=" <<<
        - config.yaml and define variables for data ingestion
        - params.yaml
        - entity -> create everything inside the 01_data_ingestion and then add
        - src\CNN_Classifier\constants\__init__.py -> code the linking between config.yaml and paraml.yaml
        - ...
        - ...
        - ...
Amazing, now if i wanto to update or change something i can just modify the config.yaml file due to the amazing project structure.


################################
Do the same for every stage of the model development.
###############################

REMEMBER TO RUN THIS BEFORE RUNNING THE PIPELINE (when closing and reopening program or terminal):

export MLFLOW_TRACKING_URI=https://dagshub.com/DavidAlexanderMoe/Kidney-Tumor-Detection-End-To-End.mlflow
export MLFLOW_TRACKING_USERNAME=DavidAlexanderMoe 
export MLFLOW_TRACKING_PASSWORD=...


DVC:
Pipeline tracking with DVC

Write code -> cache: false -> make sure you have the .git file inside the repo
-> open terminal -> dvc init -> delete artifacts to run the pipeline again using dvc
-> comment out evaluation.log_into_mlflow() in 04 stage
-> dvc repro (run the dvc.yaml file to run the pipeline) (it will track everything in the dvc.lock file)
If you retype after running the code dvc repro it will let you select the stages to do!

------------------------------------------------------------
$ dvc repro
Stage 'data_ingestion' didn't change, skipping
Stage 'prepare_base_model' didn't change, skipping
Stage 'training' didn't change, skipping
Stage 'evaluation' didn't change, skipping
Data and pipelines are up to date.
------------------------------------------------------------

If i delete a stage from the artifacts directory/make changes to the code and retype dvc repro it will skip the present stages 
and it will do the missing ones!
If you do not make changes in the code the dvc won't run.